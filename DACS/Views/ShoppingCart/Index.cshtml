@using DACS.Extention
@model ShoppingCart
@Html.AntiForgeryToken()

<div class="container my-5">
	<h2 class="mb-4">Sản phẩm của tao</h2>
	<div class="row">
		<div class="col-md-12">
			<table class="table align-middle text-center">
				<thead class="table-light">
					<tr>
						<th>Sản phẩm</th>
						<th>Số lượng</th>
						<th>Giá</th>
						<th>Tổng giá</th>
						<th></th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in Model.Items)
					{
						var quantity = item.Quantity > 0 ? item.Quantity : 0.1M;
						var lineTotal = item.Price * quantity;

						<tr>
							<td class="text-start">
								<div class="d-flex align-items-center">
									@item.Name


								</div>
							</td>
							<td>
								<div class="input-group input-group-sm justify-content-center">
									<input type="number" class="form-control text-center soLuongInput"
										   style="max-width: 60px;"
										   min="0.1" max="1000" step="0.1"
										   value="@item.Khoiluong"
										   data-price="@item.Price"
										   data-target="total-@item.ProductId"
										   data-id="@item.ProductId">

								</div>
							</td>
							<td>@item.Price.ToString("N0") ₫</td>
							<td id="total-@item.ProductId">@lineTotal.ToString("N0") ₫</td>
							<td>
								<a asp-action="RemoveFromCart" asp-route-productId="@item.ProductId" class="btn btn-outline-danger btn-sm">🗑</a>
							</td>
						</tr>
					}
				</tbody>
			</table>

			<div class="d-flex justify-content-end">
				<h4 class="text-danger">Tổng tiền: <span id="grandTotal">0 ₫</span></h4>
			</div>

			<div class="d-flex justify-content-between mt-4">
				<a href="/DS_SP/Index" class="btn btn-light">← Tiếp tục mua sắm</a>
				<a asp-action="Checkout" class="btn btn-success">Tới trang thanh toán</a>
			</div>
		</div>
	</div>
</div>
<script>
	document.addEventListener('DOMContentLoaded', function () {
		const inputs = document.querySelectorAll('.soLuongInput');

		function updateLineTotal(input) {
			const price = parseFloat(input.dataset.price);
			const quantity = parseFloat(input.value) || 0;
			const total = price * quantity;
			const targetId = input.dataset.target;
			const totalElement = document.getElementById(targetId);
			if (totalElement) {
				totalElement.textContent = total.toLocaleString('vi-VN') + " ₫";
			}
			return total;
		}

		function updateGrandTotal() {
			let grandTotal = 0;
			const seen = new Set();

			inputs.forEach(input => {
				const id = input.dataset.id;
				if (!seen.has(id)) {
					grandTotal += updateLineTotal(input);
					seen.add(id);
				}
			});

			const grandTotalElement = document.getElementById('grandTotal');
			if (grandTotalElement) {
				grandTotalElement.textContent = grandTotal.toLocaleString('vi-VN') + " ₫";
			}
		}

		// Gửi Ajax khi người dùng đổi số lượng
		inputs.forEach(input => {
			input.addEventListener('change', function () {
				const khoiluong = parseFloat(this.value);

				// Kiểm tra giới hạn
				if (khoiluong < 0.1 || khoiluong > 1000) {
					alert("Khối lượng phải từ 0.1 đến 1000 kg.");
					this.value = 0.1;
					updateGrandTotal();
					return;
				}

				const productId = this.dataset.id;

				fetch('/ShoppingCart/UpdateCartItem', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
						'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
					},
					body: JSON.stringify({
						productId: productId,
						khoiluong: khoiluong
					})
				}).then(response => {
					if (response.ok) {
						updateGrandTotal(); // Cập nhật tổng sau khi lưu
					}
				});
			});

			// Cập nhật tổng khi gõ
			input.addEventListener('input', function () {
				const value = parseFloat(this.value);
				if (value >= 0.1 && value <= 1000) {
					updateGrandTotal();
				}
			});
		});

		updateGrandTotal(); // Cập nhật lúc load trang
	});
</script>


